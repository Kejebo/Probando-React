{"version":3,"sources":["components/AddCategories.js","helper/getGif.js","components/GridGifItem.js","components/GifGrid.js","hooks/useFetchGif.js","GitExpertApp.js","index.js"],"names":["AddCategories","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","placeholder","onChange","target","value","getGif","category","a","url","encodeURI","fetch","resp","json","data","imgs","map","img","id","title","images","downsized_medium","GridGifItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGif","GitExpertApp","setcategories","ReactDOM","render","document","getElementById"],"mappings":"mLAGaA,EAAgB,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACbC,mBAAS,IADI,mBACxCC,EADwC,KAC5BC,EAD4B,KAY9C,OACI,sBAAMC,SAPO,SAACC,GACdA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,GAC5BR,GAAc,SAAAS,GAAU,OAAGP,GAAH,mBAAiBO,QAIzC,SACI,uBACIC,KAAK,OACLC,YAAaT,EACbU,SAdM,SAACP,GACfF,EAAcE,EAAEQ,OAAOC,a,+BCNlBC,EAAM,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DACXC,EADW,gDACoCC,UAAUH,GAD9C,+DAECI,MAAMF,GAFP,cAEXG,EAFW,gBAGKA,EAAKC,OAHV,uBAGTC,EAHS,EAGTA,KAEFC,EAAKD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QATpB,kBAYVM,GAZU,4CAAF,sDCCNO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OADAc,QAAQC,IAAIf,GAER,sBAAKgB,UAAU,iDAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCHHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDZ,SAACA,GAAc,IAAD,EAEXf,mBAAS,CAC/BsB,KAAK,GACLe,SAAQ,IAJyB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAqBrC,OAdAC,qBAAU,WACN1B,EAAOC,GACN0B,MAAM,SAAAhB,GACHiB,YAAW,WACXH,EAAS,CACLjB,KAAKG,EACLY,SAAQ,SAGlB,OAGA,CAACtB,IAEIuB,EDlBwBK,CAAY5B,GAA/Ba,EAFuB,EAE5BN,KAAae,EAFe,EAEfA,QAGpB,OACA,qCACA,oBAAIJ,UAAU,6DAAd,SAA4ElB,IACvEsB,GAAW,mBAAGJ,UAAU,4DAAb,qBAChB,qBAAKA,UAAU,YAAf,SAEIL,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAIIA,GAFCA,EAAIC,aEfRkB,EAAc,WAAK,IAAD,EAES5C,mBAAS,CAAC,cAFnB,mBAEpBQ,EAFoB,KAERqC,EAFQ,KAI3B,OACI,qCACA,8CACA,uBACA,cAAC,EAAD,CAAe9C,cAAe8C,IAC9B,6BAESrC,EAAWgB,KAAI,SAAAT,GAAQ,OAEpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCb9B+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1d94feaa.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategories = ({setCategories}) => {\r\n    const[inputValue, setInputValue]=useState('');\r\n\r\n    const handleInput=(e)=>{\r\n        setInputValue(e.target.value)\r\n    }\r\n    const handleForm=(e)=>{\r\n        e.preventDefault() \r\n        if(inputValue.trim().length>2){\r\n        setCategories(categories=>[inputValue,...categories]);\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleForm}>\r\n            <input\r\n                type='text'\r\n                placeholder={inputValue}\r\n                onChange={handleInput}\r\n            />\r\n        </form>\r\n    )\r\n}\r\nAddCategories.propTypes = {\r\n    setCategories:PropTypes.func.isRequired\r\n}","\r\nexport const getGif= async (category) => {\r\n    const url=  `https:/api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=92INiygooGepYIETwM98lx5oISzl6naf`;\r\n    const resp= await fetch(url);\r\n    const { data }= await resp.json();\r\n    \r\n    const imgs=data.map(img => {\r\n    return {\r\n        id:img.id,\r\n        title: img.title,\r\n        url:img.images?.downsized_medium.url\r\n    }\r\n    })\r\n    return imgs;\r\n}","import React from 'react'\r\n\r\nexport const GridGifItem = ({id,title,url}) => {\r\n    console.log(url);\r\n    return (\r\n        <div className=\"card animate__slideInLeft  animate__delay-20s \">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGif } from '../hooks/useFetchGif';\r\nimport { GridGifItem } from './GridGifItem';\r\n//import {getGif} from '../helper/getGif';\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGif(category);\r\n  \r\n\r\n    return (\r\n    <>\r\n    <h1 className=\"animate__animated animate__bounce animate__animate__fadeIn\">{category}</h1>\r\n        {loading && <p className=\"animate__animated animate__bounce animate__animate__flash\">loading</p>}\r\n    <div className=\"card-grid\">\r\n        {\r\n        images.map( img => (\r\n            <GridGifItem \r\n            \r\n            key={img.id} \r\n            \r\n            {...img}\r\n            />\r\n        ))\r\n    }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGif } from \"../helper/getGif\";\r\n\r\nexport const useFetchGif = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGif(category)\r\n        .then( img =>{\r\n            setTimeout(() => {                \r\n            setState({\r\n                data:img,\r\n                loading:false\r\n            })\r\n        });\r\n    },3000);\r\n\r\n    \r\n   }, [category]);\r\n\r\n    return state;\r\n\r\n}\r\n","import React, {useState} from 'react';\r\nimport { AddCategories } from './components/AddCategories';\r\nimport { GifGrid } from './components/GifGrid';\r\nexport const GitExpertApp= ()=>{\r\n\r\n    const [categories, setcategories] = useState(['One Punch'])\r\n\r\n    return (\r\n        <>\r\n        <h2>GitExpertApp</h2>\r\n        <hr/>\r\n        <AddCategories setCategories={setcategories}/>\r\n        <ol>\r\n             {\r\n                 categories.map(category => (\r\n                    \r\n                    <GifGrid \r\n                        key={ category }\r\n                        category={ category }\r\n                    />\r\n                 ))\r\n             }\r\n        </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GitExpertApp } from './GitExpertApp';\nimport './index.css';\nReactDOM.render(\n    <GitExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}